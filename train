import pandas as pd
import numpy as np
from lightfm import LightFM
from lightfm.data import Dataset
import pickle
import scipy
# Đọc dữ liệu từ file CSV
df = pd.read_csv("/content/test_lightfm.csv")

# 1. Xử lý dữ liệu
users = df[['Customer ID', 'Age', 'Gender', 'Location']].drop_duplicates()
items = df[['Item Purchased', 'Category', 'Size', 'Color', 'Season']].drop_duplicates()
interactions = df[['Customer ID', 'Item Purchased']]
interactions['rating'] = 1

# 2. Khởi tạo Dataset
dataset = Dataset()
dataset.fit(users['Customer ID'], items['Item Purchased'])

user_features_list = [
    [str(row['Age']), row['Gender'], row['Location']] for _, row in users.iterrows()
]
item_features_list = [
    [row['Category'], str(row['Size']), row['Color'], row['Season']] for _, row in items.iterrows()
]

all_user_features = set(f for sub in user_features_list for f in sub)
all_item_features = set(f for sub in item_features_list for f in sub)

dataset.fit_partial(user_features=all_user_features, item_features=all_item_features)

(interactions_matrix, _) = dataset.build_interactions(
    [(row['Customer ID'], row['Item Purchased']) for _, row in interactions.iterrows()]
)

user_features = dataset.build_user_features([
    (row['Customer ID'], [str(row['Age']), row['Gender'], row['Location']])
    for _, row in users.iterrows()
])
item_features = dataset.build_item_features([
    (row['Item Purchased'], [row['Category'], str(row['Size']), row['Color'], row['Season']])
    for _, row in items.iterrows()
])
# 3. Huấn luyện mô hình
model = LightFM(loss='warp')
model.fit(interactions_matrix, user_features=user_features, item_features=item_features, epochs=10, num_threads=2)

def recommend_for_existing_user(user_id, top_n=5):
    # Lấy ánh xạ user_id từ dataset
    user_id_map = dataset.mapping()[0]  # {original_id: internal_id}
    item_id_map = {v: k for k, v in dataset.mapping()[2].items()}  # {internal_id: original_id}

    if user_id not in user_id_map:
        print(f"⚠️ User ID '{user_id}' chưa được huấn luyện trong hệ thống.")
        return []

    # Lấy internal id
    user_internal_id = user_id_map[user_id]

    # Dự đoán điểm cho toàn bộ item
    scores = model.predict(
        user_ids=user_internal_id,
        item_ids=np.arange(item_features.shape[0]),
        user_features=user_features,
        item_features=item_features
    )

    # Sắp xếp điểm giảm dần
    top_items_indices = np.argsort(-scores)[:top_n]

    # Lấy thông tin sản phẩm gợi ý
    recommendations = []
    for idx in top_items_indices:
        item_name = item_id_map.get(idx)
        if item_name in items['Item Purchased'].values:
            item_info = items[items['Item Purchased'] == item_name].iloc[0]
            recommendations.append({
                "Product": item_name,
                "Category": item_info['Category'],
                "Size": item_info['Size'],
                "Color": item_info['Color']
            })
        else:
            print(f"⚠️ Item '{item_name}' không tìm thấy trong dữ liệu sản phẩm.")

    return recommendations

# Ví dụ: Gợi ý cho user ID cụ thể
user_id = int("1495")  # Thay bằng ID thực tế trong dữ liệu bạn có
results = recommend_for_existing_user(user_id)
for r in results:
    print(r)

